/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "rpc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace rocksdb {


TCompactFilesRequest::~TCompactFilesRequest() noexcept {
}


void TCompactFilesRequest::__set_cf_name(const std::string& val) {
  this->cf_name = val;
}

void TCompactFilesRequest::__set_flush_nums(const std::vector<int64_t> & val) {
  this->flush_nums = val;
}

void TCompactFilesRequest::__set_compaction_nums(const std::vector<int64_t> & val) {
  this->compaction_nums = val;
}

void TCompactFilesRequest::__set_path_ids(const std::vector<int32_t> & val) {
  this->path_ids = val;
}

void TCompactFilesRequest::__set_output_level(const int32_t val) {
  this->output_level = val;
}

void TCompactFilesRequest::__set_start_file_num(const int64_t val) {
  this->start_file_num = val;
}

void TCompactFilesRequest::__set_max_file_num(const int32_t val) {
  this->max_file_num = val;
}

void TCompactFilesRequest::__set_comp_start(const std::string& val) {
  this->comp_start = val;
}

void TCompactFilesRequest::__set_comp_end(const std::string& val) {
  this->comp_end = val;
}
std::ostream& operator<<(std::ostream& out, const TCompactFilesRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TCompactFilesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cf_name);
          this->__isset.cf_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->flush_nums.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->flush_nums.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI64(this->flush_nums[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.flush_nums = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->compaction_nums.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->compaction_nums.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI64(this->compaction_nums[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.compaction_nums = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->path_ids.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->path_ids.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readI32(this->path_ids[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.path_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->output_level);
          this->__isset.output_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start_file_num);
          this->__isset.start_file_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_file_num);
          this->__isset.max_file_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->comp_start);
          this->__isset.comp_start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->comp_end);
          this->__isset.comp_end = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TCompactFilesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TCompactFilesRequest");

  xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->cf_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flush_nums", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->flush_nums.size()));
    std::vector<int64_t> ::const_iterator _iter15;
    for (_iter15 = this->flush_nums.begin(); _iter15 != this->flush_nums.end(); ++_iter15)
    {
      xfer += oprot->writeI64((*_iter15));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compaction_nums", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->compaction_nums.size()));
    std::vector<int64_t> ::const_iterator _iter16;
    for (_iter16 = this->compaction_nums.begin(); _iter16 != this->compaction_nums.end(); ++_iter16)
    {
      xfer += oprot->writeI64((*_iter16));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path_ids", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->path_ids.size()));
    std::vector<int32_t> ::const_iterator _iter17;
    for (_iter17 = this->path_ids.begin(); _iter17 != this->path_ids.end(); ++_iter17)
    {
      xfer += oprot->writeI32((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("output_level", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->output_level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_file_num", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->start_file_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_file_num", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->max_file_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comp_start", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeBinary(this->comp_start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comp_end", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeBinary(this->comp_end);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCompactFilesRequest &a, TCompactFilesRequest &b) {
  using ::std::swap;
  swap(a.cf_name, b.cf_name);
  swap(a.flush_nums, b.flush_nums);
  swap(a.compaction_nums, b.compaction_nums);
  swap(a.path_ids, b.path_ids);
  swap(a.output_level, b.output_level);
  swap(a.start_file_num, b.start_file_num);
  swap(a.max_file_num, b.max_file_num);
  swap(a.comp_start, b.comp_start);
  swap(a.comp_end, b.comp_end);
  swap(a.__isset, b.__isset);
}

TCompactFilesRequest::TCompactFilesRequest(const TCompactFilesRequest& other18) {
  cf_name = other18.cf_name;
  flush_nums = other18.flush_nums;
  compaction_nums = other18.compaction_nums;
  path_ids = other18.path_ids;
  output_level = other18.output_level;
  start_file_num = other18.start_file_num;
  max_file_num = other18.max_file_num;
  comp_start = other18.comp_start;
  comp_end = other18.comp_end;
  __isset = other18.__isset;
}
TCompactFilesRequest& TCompactFilesRequest::operator=(const TCompactFilesRequest& other19) {
  cf_name = other19.cf_name;
  flush_nums = other19.flush_nums;
  compaction_nums = other19.compaction_nums;
  path_ids = other19.path_ids;
  output_level = other19.output_level;
  start_file_num = other19.start_file_num;
  max_file_num = other19.max_file_num;
  comp_start = other19.comp_start;
  comp_end = other19.comp_end;
  __isset = other19.__isset;
  return *this;
}
void TCompactFilesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCompactFilesRequest(";
  out << "cf_name=" << to_string(cf_name);
  out << ", " << "flush_nums=" << to_string(flush_nums);
  out << ", " << "compaction_nums=" << to_string(compaction_nums);
  out << ", " << "path_ids=" << to_string(path_ids);
  out << ", " << "output_level=" << to_string(output_level);
  out << ", " << "start_file_num=" << to_string(start_file_num);
  out << ", " << "max_file_num=" << to_string(max_file_num);
  out << ", " << "comp_start=" << to_string(comp_start);
  out << ", " << "comp_end=" << to_string(comp_end);
  out << ")";
}


TFileDescriptor::~TFileDescriptor() noexcept {
}


void TFileDescriptor::__set_flush_number(const int64_t val) {
  this->flush_number = val;
}

void TFileDescriptor::__set_merge_number(const int64_t val) {
  this->merge_number = val;
}

void TFileDescriptor::__set_path_id(const int32_t val) {
  this->path_id = val;
}

void TFileDescriptor::__set_file_size(const int64_t val) {
  this->file_size = val;
}

void TFileDescriptor::__set_smallest_seqno(const int64_t val) {
  this->smallest_seqno = val;
}

void TFileDescriptor::__set_largest_seqno(const int64_t val) {
  this->largest_seqno = val;
}
std::ostream& operator<<(std::ostream& out, const TFileDescriptor& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TFileDescriptor::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flush_number);
          this->__isset.flush_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->merge_number);
          this->__isset.merge_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->path_id);
          this->__isset.path_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->file_size);
          this->__isset.file_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->smallest_seqno);
          this->__isset.smallest_seqno = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->largest_seqno);
          this->__isset.largest_seqno = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TFileDescriptor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TFileDescriptor");

  xfer += oprot->writeFieldBegin("flush_number", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->flush_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("merge_number", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->merge_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->path_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_size", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->file_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("smallest_seqno", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->smallest_seqno);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("largest_seqno", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->largest_seqno);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TFileDescriptor &a, TFileDescriptor &b) {
  using ::std::swap;
  swap(a.flush_number, b.flush_number);
  swap(a.merge_number, b.merge_number);
  swap(a.path_id, b.path_id);
  swap(a.file_size, b.file_size);
  swap(a.smallest_seqno, b.smallest_seqno);
  swap(a.largest_seqno, b.largest_seqno);
  swap(a.__isset, b.__isset);
}

TFileDescriptor::TFileDescriptor(const TFileDescriptor& other20) {
  flush_number = other20.flush_number;
  merge_number = other20.merge_number;
  path_id = other20.path_id;
  file_size = other20.file_size;
  smallest_seqno = other20.smallest_seqno;
  largest_seqno = other20.largest_seqno;
  __isset = other20.__isset;
}
TFileDescriptor& TFileDescriptor::operator=(const TFileDescriptor& other21) {
  flush_number = other21.flush_number;
  merge_number = other21.merge_number;
  path_id = other21.path_id;
  file_size = other21.file_size;
  smallest_seqno = other21.smallest_seqno;
  largest_seqno = other21.largest_seqno;
  __isset = other21.__isset;
  return *this;
}
void TFileDescriptor::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TFileDescriptor(";
  out << "flush_number=" << to_string(flush_number);
  out << ", " << "merge_number=" << to_string(merge_number);
  out << ", " << "path_id=" << to_string(path_id);
  out << ", " << "file_size=" << to_string(file_size);
  out << ", " << "smallest_seqno=" << to_string(smallest_seqno);
  out << ", " << "largest_seqno=" << to_string(largest_seqno);
  out << ")";
}


TFileMetadata::~TFileMetadata() noexcept {
}


void TFileMetadata::__set_fd(const TFileDescriptor& val) {
  this->fd = val;
}

void TFileMetadata::__set_smallest_key(const std::string& val) {
  this->smallest_key = val;
}

void TFileMetadata::__set_largest_key(const std::string& val) {
  this->largest_key = val;
}

void TFileMetadata::__set_num_entries(const int64_t val) {
  this->num_entries = val;
}

void TFileMetadata::__set_num_deletions(const int64_t val) {
  this->num_deletions = val;
}

void TFileMetadata::__set_raw_key_size(const int64_t val) {
  this->raw_key_size = val;
}

void TFileMetadata::__set_raw_value_size(const int64_t val) {
  this->raw_value_size = val;
}

void TFileMetadata::__set_oldest_ancester_time(const int64_t val) {
  this->oldest_ancester_time = val;
}

void TFileMetadata::__set_file_creation_time(const int64_t val) {
  this->file_creation_time = val;
}

void TFileMetadata::__set_file_checksum(const std::string& val) {
  this->file_checksum = val;
}

void TFileMetadata::__set_file_checksum_func_name(const std::string& val) {
  this->file_checksum_func_name = val;
}
std::ostream& operator<<(std::ostream& out, const TFileMetadata& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TFileMetadata::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fd.read(iprot);
          this->__isset.fd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->smallest_key);
          this->__isset.smallest_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->largest_key);
          this->__isset.largest_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num_entries);
          this->__isset.num_entries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num_deletions);
          this->__isset.num_deletions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->raw_key_size);
          this->__isset.raw_key_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->raw_value_size);
          this->__isset.raw_value_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oldest_ancester_time);
          this->__isset.oldest_ancester_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->file_creation_time);
          this->__isset.file_creation_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_checksum);
          this->__isset.file_checksum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_checksum_func_name);
          this->__isset.file_checksum_func_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TFileMetadata::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TFileMetadata");

  xfer += oprot->writeFieldBegin("fd", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->fd.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("smallest_key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->smallest_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("largest_key", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->largest_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_entries", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->num_entries);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_deletions", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->num_deletions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("raw_key_size", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->raw_key_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("raw_value_size", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->raw_value_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oldest_ancester_time", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->oldest_ancester_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_creation_time", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->file_creation_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_checksum", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->file_checksum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_checksum_func_name", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->file_checksum_func_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TFileMetadata &a, TFileMetadata &b) {
  using ::std::swap;
  swap(a.fd, b.fd);
  swap(a.smallest_key, b.smallest_key);
  swap(a.largest_key, b.largest_key);
  swap(a.num_entries, b.num_entries);
  swap(a.num_deletions, b.num_deletions);
  swap(a.raw_key_size, b.raw_key_size);
  swap(a.raw_value_size, b.raw_value_size);
  swap(a.oldest_ancester_time, b.oldest_ancester_time);
  swap(a.file_creation_time, b.file_creation_time);
  swap(a.file_checksum, b.file_checksum);
  swap(a.file_checksum_func_name, b.file_checksum_func_name);
  swap(a.__isset, b.__isset);
}

TFileMetadata::TFileMetadata(const TFileMetadata& other22) {
  fd = other22.fd;
  smallest_key = other22.smallest_key;
  largest_key = other22.largest_key;
  num_entries = other22.num_entries;
  num_deletions = other22.num_deletions;
  raw_key_size = other22.raw_key_size;
  raw_value_size = other22.raw_value_size;
  oldest_ancester_time = other22.oldest_ancester_time;
  file_creation_time = other22.file_creation_time;
  file_checksum = other22.file_checksum;
  file_checksum_func_name = other22.file_checksum_func_name;
  __isset = other22.__isset;
}
TFileMetadata& TFileMetadata::operator=(const TFileMetadata& other23) {
  fd = other23.fd;
  smallest_key = other23.smallest_key;
  largest_key = other23.largest_key;
  num_entries = other23.num_entries;
  num_deletions = other23.num_deletions;
  raw_key_size = other23.raw_key_size;
  raw_value_size = other23.raw_value_size;
  oldest_ancester_time = other23.oldest_ancester_time;
  file_creation_time = other23.file_creation_time;
  file_checksum = other23.file_checksum;
  file_checksum_func_name = other23.file_checksum_func_name;
  __isset = other23.__isset;
  return *this;
}
void TFileMetadata::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TFileMetadata(";
  out << "fd=" << to_string(fd);
  out << ", " << "smallest_key=" << to_string(smallest_key);
  out << ", " << "largest_key=" << to_string(largest_key);
  out << ", " << "num_entries=" << to_string(num_entries);
  out << ", " << "num_deletions=" << to_string(num_deletions);
  out << ", " << "raw_key_size=" << to_string(raw_key_size);
  out << ", " << "raw_value_size=" << to_string(raw_value_size);
  out << ", " << "oldest_ancester_time=" << to_string(oldest_ancester_time);
  out << ", " << "file_creation_time=" << to_string(file_creation_time);
  out << ", " << "file_checksum=" << to_string(file_checksum);
  out << ", " << "file_checksum_func_name=" << to_string(file_checksum_func_name);
  out << ")";
}


TStatus::~TStatus() noexcept {
}


void TStatus::__set_code(const int32_t val) {
  this->code = val;
}

void TStatus::__set_sub_code(const int32_t val) {
  this->sub_code = val;
}

void TStatus::__set_severity(const int32_t val) {
  this->severity = val;
}

void TStatus::__set_state(const std::string& val) {
  this->state = val;
}
std::ostream& operator<<(std::ostream& out, const TStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_code);
          this->__isset.sub_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->severity);
          this->__isset.severity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TStatus");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_code", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sub_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("severity", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->severity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TStatus &a, TStatus &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.sub_code, b.sub_code);
  swap(a.severity, b.severity);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

TStatus::TStatus(const TStatus& other24) {
  code = other24.code;
  sub_code = other24.sub_code;
  severity = other24.severity;
  state = other24.state;
  __isset = other24.__isset;
}
TStatus& TStatus::operator=(const TStatus& other25) {
  code = other25.code;
  sub_code = other25.sub_code;
  severity = other25.severity;
  state = other25.state;
  __isset = other25.__isset;
  return *this;
}
void TStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TStatus(";
  out << "code=" << to_string(code);
  out << ", " << "sub_code=" << to_string(sub_code);
  out << ", " << "severity=" << to_string(severity);
  out << ", " << "state=" << to_string(state);
  out << ")";
}


TCompactionResult::~TCompactionResult() noexcept {
}


void TCompactionResult::__set_status(const TStatus& val) {
  this->status = val;
}

void TCompactionResult::__set_output_files(const std::vector<TFileMetadata> & val) {
  this->output_files = val;
}

void TCompactionResult::__set_total_bytes(const int64_t val) {
  this->total_bytes = val;
}

void TCompactionResult::__set_num_output_records(const int64_t val) {
  this->num_output_records = val;
}

void TCompactionResult::__set_db_paths(const std::vector<std::string> & val) {
  this->db_paths = val;
}
std::ostream& operator<<(std::ostream& out, const TCompactionResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TCompactionResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->output_files.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            xfer += iprot->readListBegin(_etype29, _size26);
            this->output_files.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += this->output_files[_i30].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.output_files = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->total_bytes);
          this->__isset.total_bytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num_output_records);
          this->__isset.num_output_records = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->db_paths.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readListBegin(_etype34, _size31);
            this->db_paths.resize(_size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              xfer += iprot->readString(this->db_paths[_i35]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.db_paths = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TCompactionResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TCompactionResult");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("output_files", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->output_files.size()));
    std::vector<TFileMetadata> ::const_iterator _iter36;
    for (_iter36 = this->output_files.begin(); _iter36 != this->output_files.end(); ++_iter36)
    {
      xfer += (*_iter36).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total_bytes", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->total_bytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_output_records", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->num_output_records);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_paths", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->db_paths.size()));
    std::vector<std::string> ::const_iterator _iter37;
    for (_iter37 = this->db_paths.begin(); _iter37 != this->db_paths.end(); ++_iter37)
    {
      xfer += oprot->writeString((*_iter37));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCompactionResult &a, TCompactionResult &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.output_files, b.output_files);
  swap(a.total_bytes, b.total_bytes);
  swap(a.num_output_records, b.num_output_records);
  swap(a.db_paths, b.db_paths);
  swap(a.__isset, b.__isset);
}

TCompactionResult::TCompactionResult(const TCompactionResult& other38) {
  status = other38.status;
  output_files = other38.output_files;
  total_bytes = other38.total_bytes;
  num_output_records = other38.num_output_records;
  db_paths = other38.db_paths;
  __isset = other38.__isset;
}
TCompactionResult& TCompactionResult::operator=(const TCompactionResult& other39) {
  status = other39.status;
  output_files = other39.output_files;
  total_bytes = other39.total_bytes;
  num_output_records = other39.num_output_records;
  db_paths = other39.db_paths;
  __isset = other39.__isset;
  return *this;
}
void TCompactionResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCompactionResult(";
  out << "status=" << to_string(status);
  out << ", " << "output_files=" << to_string(output_files);
  out << ", " << "total_bytes=" << to_string(total_bytes);
  out << ", " << "num_output_records=" << to_string(num_output_records);
  out << ", " << "db_paths=" << to_string(db_paths);
  out << ")";
}


TDeletedCompactionInput::~TDeletedCompactionInput() noexcept {
}


void TDeletedCompactionInput::__set_level(const int32_t val) {
  this->level = val;
}

void TDeletedCompactionInput::__set_flush_num(const int64_t val) {
  this->flush_num = val;
}

void TDeletedCompactionInput::__set_compaction_num(const int64_t val) {
  this->compaction_num = val;
}
std::ostream& operator<<(std::ostream& out, const TDeletedCompactionInput& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDeletedCompactionInput::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flush_num);
          this->__isset.flush_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->compaction_num);
          this->__isset.compaction_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDeletedCompactionInput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDeletedCompactionInput");

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flush_num", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->flush_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compaction_num", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->compaction_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDeletedCompactionInput &a, TDeletedCompactionInput &b) {
  using ::std::swap;
  swap(a.level, b.level);
  swap(a.flush_num, b.flush_num);
  swap(a.compaction_num, b.compaction_num);
  swap(a.__isset, b.__isset);
}

TDeletedCompactionInput::TDeletedCompactionInput(const TDeletedCompactionInput& other40) {
  level = other40.level;
  flush_num = other40.flush_num;
  compaction_num = other40.compaction_num;
  __isset = other40.__isset;
}
TDeletedCompactionInput& TDeletedCompactionInput::operator=(const TDeletedCompactionInput& other41) {
  level = other41.level;
  flush_num = other41.flush_num;
  compaction_num = other41.compaction_num;
  __isset = other41.__isset;
  return *this;
}
void TDeletedCompactionInput::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDeletedCompactionInput(";
  out << "level=" << to_string(level);
  out << ", " << "flush_num=" << to_string(flush_num);
  out << ", " << "compaction_num=" << to_string(compaction_num);
  out << ")";
}


TInstalledCompactionOutput::~TInstalledCompactionOutput() noexcept {
}


void TInstalledCompactionOutput::__set_level(const int32_t val) {
  this->level = val;
}

void TInstalledCompactionOutput::__set_metadata(const TFileMetadata& val) {
  this->metadata = val;
}
std::ostream& operator<<(std::ostream& out, const TInstalledCompactionOutput& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TInstalledCompactionOutput::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->metadata.read(iprot);
          this->__isset.metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TInstalledCompactionOutput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TInstalledCompactionOutput");

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->metadata.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TInstalledCompactionOutput &a, TInstalledCompactionOutput &b) {
  using ::std::swap;
  swap(a.level, b.level);
  swap(a.metadata, b.metadata);
  swap(a.__isset, b.__isset);
}

TInstalledCompactionOutput::TInstalledCompactionOutput(const TInstalledCompactionOutput& other42) {
  level = other42.level;
  metadata = other42.metadata;
  __isset = other42.__isset;
}
TInstalledCompactionOutput& TInstalledCompactionOutput::operator=(const TInstalledCompactionOutput& other43) {
  level = other43.level;
  metadata = other43.metadata;
  __isset = other43.__isset;
  return *this;
}
void TInstalledCompactionOutput::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TInstalledCompactionOutput(";
  out << "level=" << to_string(level);
  out << ", " << "metadata=" << to_string(metadata);
  out << ")";
}


TInstallCompactionRequest::~TInstallCompactionRequest() noexcept {
}


void TInstallCompactionRequest::__set_deleted_inputs(const std::vector<TDeletedCompactionInput> & val) {
  this->deleted_inputs = val;
}

void TInstallCompactionRequest::__set_installed_outputs(const std::vector<TInstalledCompactionOutput> & val) {
  this->installed_outputs = val;
}
std::ostream& operator<<(std::ostream& out, const TInstallCompactionRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TInstallCompactionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->deleted_inputs.clear();
            uint32_t _size44;
            ::apache::thrift::protocol::TType _etype47;
            xfer += iprot->readListBegin(_etype47, _size44);
            this->deleted_inputs.resize(_size44);
            uint32_t _i48;
            for (_i48 = 0; _i48 < _size44; ++_i48)
            {
              xfer += this->deleted_inputs[_i48].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.deleted_inputs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->installed_outputs.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _etype52;
            xfer += iprot->readListBegin(_etype52, _size49);
            this->installed_outputs.resize(_size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              xfer += this->installed_outputs[_i53].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.installed_outputs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TInstallCompactionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TInstallCompactionRequest");

  xfer += oprot->writeFieldBegin("deleted_inputs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->deleted_inputs.size()));
    std::vector<TDeletedCompactionInput> ::const_iterator _iter54;
    for (_iter54 = this->deleted_inputs.begin(); _iter54 != this->deleted_inputs.end(); ++_iter54)
    {
      xfer += (*_iter54).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("installed_outputs", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->installed_outputs.size()));
    std::vector<TInstalledCompactionOutput> ::const_iterator _iter55;
    for (_iter55 = this->installed_outputs.begin(); _iter55 != this->installed_outputs.end(); ++_iter55)
    {
      xfer += (*_iter55).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TInstallCompactionRequest &a, TInstallCompactionRequest &b) {
  using ::std::swap;
  swap(a.deleted_inputs, b.deleted_inputs);
  swap(a.installed_outputs, b.installed_outputs);
  swap(a.__isset, b.__isset);
}

TInstallCompactionRequest::TInstallCompactionRequest(const TInstallCompactionRequest& other56) {
  deleted_inputs = other56.deleted_inputs;
  installed_outputs = other56.installed_outputs;
  __isset = other56.__isset;
}
TInstallCompactionRequest& TInstallCompactionRequest::operator=(const TInstallCompactionRequest& other57) {
  deleted_inputs = other57.deleted_inputs;
  installed_outputs = other57.installed_outputs;
  __isset = other57.__isset;
  return *this;
}
void TInstallCompactionRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TInstallCompactionRequest(";
  out << "deleted_inputs=" << to_string(deleted_inputs);
  out << ", " << "installed_outputs=" << to_string(installed_outputs);
  out << ")";
}


GetResult::~GetResult() noexcept {
}


void GetResult::__set_status(const TStatus& val) {
  this->status = val;
}

void GetResult::__set_value(const std::string& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const GetResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetResult");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetResult &a, GetResult &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

GetResult::GetResult(const GetResult& other58) {
  status = other58.status;
  value = other58.value;
  __isset = other58.__isset;
}
GetResult& GetResult::operator=(const GetResult& other59) {
  status = other59.status;
  value = other59.value;
  __isset = other59.__isset;
  return *this;
}
void GetResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetResult(";
  out << "status=" << to_string(status);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


GetBatchResult::~GetBatchResult() noexcept {
}


void GetBatchResult::__set_status(const std::vector<TStatus> & val) {
  this->status = val;
}

void GetBatchResult::__set_values(const std::vector<std::string> & val) {
  this->values = val;
}
std::ostream& operator<<(std::ostream& out, const GetBatchResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetBatchResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->status.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            xfer += iprot->readListBegin(_etype63, _size60);
            this->status.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += this->status[_i64].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            xfer += iprot->readListBegin(_etype68, _size65);
            this->values.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += iprot->readString(this->values[_i69]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetBatchResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetBatchResult");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->status.size()));
    std::vector<TStatus> ::const_iterator _iter70;
    for (_iter70 = this->status.begin(); _iter70 != this->status.end(); ++_iter70)
    {
      xfer += (*_iter70).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->values.size()));
    std::vector<std::string> ::const_iterator _iter71;
    for (_iter71 = this->values.begin(); _iter71 != this->values.end(); ++_iter71)
    {
      xfer += oprot->writeString((*_iter71));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetBatchResult &a, GetBatchResult &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.values, b.values);
  swap(a.__isset, b.__isset);
}

GetBatchResult::GetBatchResult(const GetBatchResult& other72) {
  status = other72.status;
  values = other72.values;
  __isset = other72.__isset;
}
GetBatchResult& GetBatchResult::operator=(const GetBatchResult& other73) {
  status = other73.status;
  values = other73.values;
  __isset = other73.__isset;
  return *this;
}
void GetBatchResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetBatchResult(";
  out << "status=" << to_string(status);
  out << ", " << "values=" << to_string(values);
  out << ")";
}

} // namespace
