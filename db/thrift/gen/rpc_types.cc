/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "rpc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace rocksdb {


TCompactFilesRequest::~TCompactFilesRequest() noexcept {
}


void TCompactFilesRequest::__set_cf_name(const std::string& val) {
  this->cf_name = val;
}

void TCompactFilesRequest::__set_file_nums(const std::vector<int64_t> & val) {
  this->file_nums = val;
}

void TCompactFilesRequest::__set_output_level(const int32_t val) {
  this->output_level = val;
}

void TCompactFilesRequest::__set_start_file_num(const int64_t val) {
  this->start_file_num = val;
}

void TCompactFilesRequest::__set_max_file_num(const int32_t val) {
  this->max_file_num = val;
}

void TCompactFilesRequest::__set_comp_start(const std::string& val) {
  this->comp_start = val;
}

void TCompactFilesRequest::__set_comp_end(const std::string& val) {
  this->comp_end = val;
}
std::ostream& operator<<(std::ostream& out, const TCompactFilesRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TCompactFilesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cf_name);
          this->__isset.cf_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->file_nums.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->file_nums.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI64(this->file_nums[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.file_nums = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->output_level);
          this->__isset.output_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start_file_num);
          this->__isset.start_file_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_file_num);
          this->__isset.max_file_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->comp_start);
          this->__isset.comp_start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->comp_end);
          this->__isset.comp_end = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TCompactFilesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TCompactFilesRequest");

  xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->cf_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_nums", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->file_nums.size()));
    std::vector<int64_t> ::const_iterator _iter5;
    for (_iter5 = this->file_nums.begin(); _iter5 != this->file_nums.end(); ++_iter5)
    {
      xfer += oprot->writeI64((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("output_level", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->output_level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_file_num", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->start_file_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_file_num", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->max_file_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comp_start", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->comp_start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comp_end", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeBinary(this->comp_end);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCompactFilesRequest &a, TCompactFilesRequest &b) {
  using ::std::swap;
  swap(a.cf_name, b.cf_name);
  swap(a.file_nums, b.file_nums);
  swap(a.output_level, b.output_level);
  swap(a.start_file_num, b.start_file_num);
  swap(a.max_file_num, b.max_file_num);
  swap(a.comp_start, b.comp_start);
  swap(a.comp_end, b.comp_end);
  swap(a.__isset, b.__isset);
}

TCompactFilesRequest::TCompactFilesRequest(const TCompactFilesRequest& other6) {
  cf_name = other6.cf_name;
  file_nums = other6.file_nums;
  output_level = other6.output_level;
  start_file_num = other6.start_file_num;
  max_file_num = other6.max_file_num;
  comp_start = other6.comp_start;
  comp_end = other6.comp_end;
  __isset = other6.__isset;
}
TCompactFilesRequest& TCompactFilesRequest::operator=(const TCompactFilesRequest& other7) {
  cf_name = other7.cf_name;
  file_nums = other7.file_nums;
  output_level = other7.output_level;
  start_file_num = other7.start_file_num;
  max_file_num = other7.max_file_num;
  comp_start = other7.comp_start;
  comp_end = other7.comp_end;
  __isset = other7.__isset;
  return *this;
}
void TCompactFilesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCompactFilesRequest(";
  out << "cf_name=" << to_string(cf_name);
  out << ", " << "file_nums=" << to_string(file_nums);
  out << ", " << "output_level=" << to_string(output_level);
  out << ", " << "start_file_num=" << to_string(start_file_num);
  out << ", " << "max_file_num=" << to_string(max_file_num);
  out << ", " << "comp_start=" << to_string(comp_start);
  out << ", " << "comp_end=" << to_string(comp_end);
  out << ")";
}


TFileDescriptor::~TFileDescriptor() noexcept {
}


void TFileDescriptor::__set_packed_number_and_path_id(const int64_t val) {
  this->packed_number_and_path_id = val;
}

void TFileDescriptor::__set_file_size(const int64_t val) {
  this->file_size = val;
}

void TFileDescriptor::__set_smallest_seqno(const int64_t val) {
  this->smallest_seqno = val;
}

void TFileDescriptor::__set_largest_seqno(const int64_t val) {
  this->largest_seqno = val;
}
std::ostream& operator<<(std::ostream& out, const TFileDescriptor& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TFileDescriptor::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->packed_number_and_path_id);
          this->__isset.packed_number_and_path_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->file_size);
          this->__isset.file_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->smallest_seqno);
          this->__isset.smallest_seqno = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->largest_seqno);
          this->__isset.largest_seqno = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TFileDescriptor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TFileDescriptor");

  xfer += oprot->writeFieldBegin("packed_number_and_path_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->packed_number_and_path_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_size", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->file_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("smallest_seqno", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->smallest_seqno);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("largest_seqno", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->largest_seqno);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TFileDescriptor &a, TFileDescriptor &b) {
  using ::std::swap;
  swap(a.packed_number_and_path_id, b.packed_number_and_path_id);
  swap(a.file_size, b.file_size);
  swap(a.smallest_seqno, b.smallest_seqno);
  swap(a.largest_seqno, b.largest_seqno);
  swap(a.__isset, b.__isset);
}

TFileDescriptor::TFileDescriptor(const TFileDescriptor& other8) {
  packed_number_and_path_id = other8.packed_number_and_path_id;
  file_size = other8.file_size;
  smallest_seqno = other8.smallest_seqno;
  largest_seqno = other8.largest_seqno;
  __isset = other8.__isset;
}
TFileDescriptor& TFileDescriptor::operator=(const TFileDescriptor& other9) {
  packed_number_and_path_id = other9.packed_number_and_path_id;
  file_size = other9.file_size;
  smallest_seqno = other9.smallest_seqno;
  largest_seqno = other9.largest_seqno;
  __isset = other9.__isset;
  return *this;
}
void TFileDescriptor::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TFileDescriptor(";
  out << "packed_number_and_path_id=" << to_string(packed_number_and_path_id);
  out << ", " << "file_size=" << to_string(file_size);
  out << ", " << "smallest_seqno=" << to_string(smallest_seqno);
  out << ", " << "largest_seqno=" << to_string(largest_seqno);
  out << ")";
}


TFileMetadata::~TFileMetadata() noexcept {
}


void TFileMetadata::__set_fd(const TFileDescriptor& val) {
  this->fd = val;
}

void TFileMetadata::__set_smallest_key(const std::string& val) {
  this->smallest_key = val;
}

void TFileMetadata::__set_largest_key(const std::string& val) {
  this->largest_key = val;
}

void TFileMetadata::__set_num_entries(const int64_t val) {
  this->num_entries = val;
}

void TFileMetadata::__set_num_deletions(const int64_t val) {
  this->num_deletions = val;
}

void TFileMetadata::__set_raw_key_size(const int64_t val) {
  this->raw_key_size = val;
}

void TFileMetadata::__set_raw_value_size(const int64_t val) {
  this->raw_value_size = val;
}

void TFileMetadata::__set_oldest_ancester_time(const int64_t val) {
  this->oldest_ancester_time = val;
}

void TFileMetadata::__set_file_creation_time(const int64_t val) {
  this->file_creation_time = val;
}

void TFileMetadata::__set_file_checksum(const std::string& val) {
  this->file_checksum = val;
}

void TFileMetadata::__set_file_checksum_func_name(const std::string& val) {
  this->file_checksum_func_name = val;
}
std::ostream& operator<<(std::ostream& out, const TFileMetadata& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TFileMetadata::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fd.read(iprot);
          this->__isset.fd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->smallest_key);
          this->__isset.smallest_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->largest_key);
          this->__isset.largest_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num_entries);
          this->__isset.num_entries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num_deletions);
          this->__isset.num_deletions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->raw_key_size);
          this->__isset.raw_key_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->raw_value_size);
          this->__isset.raw_value_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oldest_ancester_time);
          this->__isset.oldest_ancester_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->file_creation_time);
          this->__isset.file_creation_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_checksum);
          this->__isset.file_checksum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_checksum_func_name);
          this->__isset.file_checksum_func_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TFileMetadata::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TFileMetadata");

  xfer += oprot->writeFieldBegin("fd", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->fd.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("smallest_key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->smallest_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("largest_key", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->largest_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_entries", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->num_entries);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_deletions", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->num_deletions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("raw_key_size", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->raw_key_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("raw_value_size", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->raw_value_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oldest_ancester_time", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->oldest_ancester_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_creation_time", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->file_creation_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_checksum", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->file_checksum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_checksum_func_name", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->file_checksum_func_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TFileMetadata &a, TFileMetadata &b) {
  using ::std::swap;
  swap(a.fd, b.fd);
  swap(a.smallest_key, b.smallest_key);
  swap(a.largest_key, b.largest_key);
  swap(a.num_entries, b.num_entries);
  swap(a.num_deletions, b.num_deletions);
  swap(a.raw_key_size, b.raw_key_size);
  swap(a.raw_value_size, b.raw_value_size);
  swap(a.oldest_ancester_time, b.oldest_ancester_time);
  swap(a.file_creation_time, b.file_creation_time);
  swap(a.file_checksum, b.file_checksum);
  swap(a.file_checksum_func_name, b.file_checksum_func_name);
  swap(a.__isset, b.__isset);
}

TFileMetadata::TFileMetadata(const TFileMetadata& other10) {
  fd = other10.fd;
  smallest_key = other10.smallest_key;
  largest_key = other10.largest_key;
  num_entries = other10.num_entries;
  num_deletions = other10.num_deletions;
  raw_key_size = other10.raw_key_size;
  raw_value_size = other10.raw_value_size;
  oldest_ancester_time = other10.oldest_ancester_time;
  file_creation_time = other10.file_creation_time;
  file_checksum = other10.file_checksum;
  file_checksum_func_name = other10.file_checksum_func_name;
  __isset = other10.__isset;
}
TFileMetadata& TFileMetadata::operator=(const TFileMetadata& other11) {
  fd = other11.fd;
  smallest_key = other11.smallest_key;
  largest_key = other11.largest_key;
  num_entries = other11.num_entries;
  num_deletions = other11.num_deletions;
  raw_key_size = other11.raw_key_size;
  raw_value_size = other11.raw_value_size;
  oldest_ancester_time = other11.oldest_ancester_time;
  file_creation_time = other11.file_creation_time;
  file_checksum = other11.file_checksum;
  file_checksum_func_name = other11.file_checksum_func_name;
  __isset = other11.__isset;
  return *this;
}
void TFileMetadata::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TFileMetadata(";
  out << "fd=" << to_string(fd);
  out << ", " << "smallest_key=" << to_string(smallest_key);
  out << ", " << "largest_key=" << to_string(largest_key);
  out << ", " << "num_entries=" << to_string(num_entries);
  out << ", " << "num_deletions=" << to_string(num_deletions);
  out << ", " << "raw_key_size=" << to_string(raw_key_size);
  out << ", " << "raw_value_size=" << to_string(raw_value_size);
  out << ", " << "oldest_ancester_time=" << to_string(oldest_ancester_time);
  out << ", " << "file_creation_time=" << to_string(file_creation_time);
  out << ", " << "file_checksum=" << to_string(file_checksum);
  out << ", " << "file_checksum_func_name=" << to_string(file_checksum_func_name);
  out << ")";
}


TStatus::~TStatus() noexcept {
}


void TStatus::__set_code(const int32_t val) {
  this->code = val;
}

void TStatus::__set_sub_code(const int32_t val) {
  this->sub_code = val;
}

void TStatus::__set_severity(const int32_t val) {
  this->severity = val;
}

void TStatus::__set_state(const std::string& val) {
  this->state = val;
}
std::ostream& operator<<(std::ostream& out, const TStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_code);
          this->__isset.sub_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->severity);
          this->__isset.severity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TStatus");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_code", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sub_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("severity", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->severity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TStatus &a, TStatus &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.sub_code, b.sub_code);
  swap(a.severity, b.severity);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

TStatus::TStatus(const TStatus& other12) {
  code = other12.code;
  sub_code = other12.sub_code;
  severity = other12.severity;
  state = other12.state;
  __isset = other12.__isset;
}
TStatus& TStatus::operator=(const TStatus& other13) {
  code = other13.code;
  sub_code = other13.sub_code;
  severity = other13.severity;
  state = other13.state;
  __isset = other13.__isset;
  return *this;
}
void TStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TStatus(";
  out << "code=" << to_string(code);
  out << ", " << "sub_code=" << to_string(sub_code);
  out << ", " << "severity=" << to_string(severity);
  out << ", " << "state=" << to_string(state);
  out << ")";
}


TCompactionResult::~TCompactionResult() noexcept {
}


void TCompactionResult::__set_status(const TStatus& val) {
  this->status = val;
}

void TCompactionResult::__set_output_files(const std::vector<TFileMetadata> & val) {
  this->output_files = val;
}

void TCompactionResult::__set_total_bytes(const int64_t val) {
  this->total_bytes = val;
}

void TCompactionResult::__set_num_output_records(const int64_t val) {
  this->num_output_records = val;
}

void TCompactionResult::__set_db_paths(const std::vector<std::string> & val) {
  this->db_paths = val;
}
std::ostream& operator<<(std::ostream& out, const TCompactionResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TCompactionResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->output_files.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->output_files.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += this->output_files[_i18].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.output_files = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->total_bytes);
          this->__isset.total_bytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num_output_records);
          this->__isset.num_output_records = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->db_paths.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readListBegin(_etype22, _size19);
            this->db_paths.resize(_size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              xfer += iprot->readString(this->db_paths[_i23]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.db_paths = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TCompactionResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TCompactionResult");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("output_files", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->output_files.size()));
    std::vector<TFileMetadata> ::const_iterator _iter24;
    for (_iter24 = this->output_files.begin(); _iter24 != this->output_files.end(); ++_iter24)
    {
      xfer += (*_iter24).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total_bytes", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->total_bytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_output_records", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->num_output_records);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_paths", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->db_paths.size()));
    std::vector<std::string> ::const_iterator _iter25;
    for (_iter25 = this->db_paths.begin(); _iter25 != this->db_paths.end(); ++_iter25)
    {
      xfer += oprot->writeString((*_iter25));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCompactionResult &a, TCompactionResult &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.output_files, b.output_files);
  swap(a.total_bytes, b.total_bytes);
  swap(a.num_output_records, b.num_output_records);
  swap(a.db_paths, b.db_paths);
  swap(a.__isset, b.__isset);
}

TCompactionResult::TCompactionResult(const TCompactionResult& other26) {
  status = other26.status;
  output_files = other26.output_files;
  total_bytes = other26.total_bytes;
  num_output_records = other26.num_output_records;
  db_paths = other26.db_paths;
  __isset = other26.__isset;
}
TCompactionResult& TCompactionResult::operator=(const TCompactionResult& other27) {
  status = other27.status;
  output_files = other27.output_files;
  total_bytes = other27.total_bytes;
  num_output_records = other27.num_output_records;
  db_paths = other27.db_paths;
  __isset = other27.__isset;
  return *this;
}
void TCompactionResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCompactionResult(";
  out << "status=" << to_string(status);
  out << ", " << "output_files=" << to_string(output_files);
  out << ", " << "total_bytes=" << to_string(total_bytes);
  out << ", " << "num_output_records=" << to_string(num_output_records);
  out << ", " << "db_paths=" << to_string(db_paths);
  out << ")";
}


TDeletedCompactionInput::~TDeletedCompactionInput() noexcept {
}


void TDeletedCompactionInput::__set_level(const int32_t val) {
  this->level = val;
}

void TDeletedCompactionInput::__set_file_num(const int64_t val) {
  this->file_num = val;
}
std::ostream& operator<<(std::ostream& out, const TDeletedCompactionInput& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDeletedCompactionInput::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->file_num);
          this->__isset.file_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDeletedCompactionInput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDeletedCompactionInput");

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_num", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->file_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDeletedCompactionInput &a, TDeletedCompactionInput &b) {
  using ::std::swap;
  swap(a.level, b.level);
  swap(a.file_num, b.file_num);
  swap(a.__isset, b.__isset);
}

TDeletedCompactionInput::TDeletedCompactionInput(const TDeletedCompactionInput& other28) {
  level = other28.level;
  file_num = other28.file_num;
  __isset = other28.__isset;
}
TDeletedCompactionInput& TDeletedCompactionInput::operator=(const TDeletedCompactionInput& other29) {
  level = other29.level;
  file_num = other29.file_num;
  __isset = other29.__isset;
  return *this;
}
void TDeletedCompactionInput::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDeletedCompactionInput(";
  out << "level=" << to_string(level);
  out << ", " << "file_num=" << to_string(file_num);
  out << ")";
}


TInstalledCompactionOutput::~TInstalledCompactionOutput() noexcept {
}


void TInstalledCompactionOutput::__set_level(const int32_t val) {
  this->level = val;
}

void TInstalledCompactionOutput::__set_metadata(const TFileMetadata& val) {
  this->metadata = val;
}
std::ostream& operator<<(std::ostream& out, const TInstalledCompactionOutput& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TInstalledCompactionOutput::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->metadata.read(iprot);
          this->__isset.metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TInstalledCompactionOutput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TInstalledCompactionOutput");

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->metadata.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TInstalledCompactionOutput &a, TInstalledCompactionOutput &b) {
  using ::std::swap;
  swap(a.level, b.level);
  swap(a.metadata, b.metadata);
  swap(a.__isset, b.__isset);
}

TInstalledCompactionOutput::TInstalledCompactionOutput(const TInstalledCompactionOutput& other30) {
  level = other30.level;
  metadata = other30.metadata;
  __isset = other30.__isset;
}
TInstalledCompactionOutput& TInstalledCompactionOutput::operator=(const TInstalledCompactionOutput& other31) {
  level = other31.level;
  metadata = other31.metadata;
  __isset = other31.__isset;
  return *this;
}
void TInstalledCompactionOutput::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TInstalledCompactionOutput(";
  out << "level=" << to_string(level);
  out << ", " << "metadata=" << to_string(metadata);
  out << ")";
}


TInstallCompactionRequest::~TInstallCompactionRequest() noexcept {
}


void TInstallCompactionRequest::__set_deleted_inputs(const std::vector<TDeletedCompactionInput> & val) {
  this->deleted_inputs = val;
}

void TInstallCompactionRequest::__set_installed_outputs(const std::vector<TInstalledCompactionOutput> & val) {
  this->installed_outputs = val;
}
std::ostream& operator<<(std::ostream& out, const TInstallCompactionRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TInstallCompactionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->deleted_inputs.clear();
            uint32_t _size32;
            ::apache::thrift::protocol::TType _etype35;
            xfer += iprot->readListBegin(_etype35, _size32);
            this->deleted_inputs.resize(_size32);
            uint32_t _i36;
            for (_i36 = 0; _i36 < _size32; ++_i36)
            {
              xfer += this->deleted_inputs[_i36].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.deleted_inputs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->installed_outputs.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->installed_outputs.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              xfer += this->installed_outputs[_i41].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.installed_outputs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TInstallCompactionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TInstallCompactionRequest");

  xfer += oprot->writeFieldBegin("deleted_inputs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->deleted_inputs.size()));
    std::vector<TDeletedCompactionInput> ::const_iterator _iter42;
    for (_iter42 = this->deleted_inputs.begin(); _iter42 != this->deleted_inputs.end(); ++_iter42)
    {
      xfer += (*_iter42).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("installed_outputs", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->installed_outputs.size()));
    std::vector<TInstalledCompactionOutput> ::const_iterator _iter43;
    for (_iter43 = this->installed_outputs.begin(); _iter43 != this->installed_outputs.end(); ++_iter43)
    {
      xfer += (*_iter43).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TInstallCompactionRequest &a, TInstallCompactionRequest &b) {
  using ::std::swap;
  swap(a.deleted_inputs, b.deleted_inputs);
  swap(a.installed_outputs, b.installed_outputs);
  swap(a.__isset, b.__isset);
}

TInstallCompactionRequest::TInstallCompactionRequest(const TInstallCompactionRequest& other44) {
  deleted_inputs = other44.deleted_inputs;
  installed_outputs = other44.installed_outputs;
  __isset = other44.__isset;
}
TInstallCompactionRequest& TInstallCompactionRequest::operator=(const TInstallCompactionRequest& other45) {
  deleted_inputs = other45.deleted_inputs;
  installed_outputs = other45.installed_outputs;
  __isset = other45.__isset;
  return *this;
}
void TInstallCompactionRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TInstallCompactionRequest(";
  out << "deleted_inputs=" << to_string(deleted_inputs);
  out << ", " << "installed_outputs=" << to_string(installed_outputs);
  out << ")";
}


GetResult::~GetResult() noexcept {
}


void GetResult::__set_status(const TStatus& val) {
  this->status = val;
}

void GetResult::__set_value(const std::string& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const GetResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetResult");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetResult &a, GetResult &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

GetResult::GetResult(const GetResult& other46) {
  status = other46.status;
  value = other46.value;
  __isset = other46.__isset;
}
GetResult& GetResult::operator=(const GetResult& other47) {
  status = other47.status;
  value = other47.value;
  __isset = other47.__isset;
  return *this;
}
void GetResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetResult(";
  out << "status=" << to_string(status);
  out << ", " << "value=" << to_string(value);
  out << ")";
}

} // namespace
