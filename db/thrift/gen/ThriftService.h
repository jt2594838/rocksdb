/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftService_H
#define ThriftService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "rpc_types.h"

namespace rocksdb {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ThriftServiceIf {
 public:
  virtual ~ThriftServiceIf() {}
  virtual void CompactFiles(TCompactionResult& _return, const TCompactFilesRequest& request) = 0;
  virtual void DownLoadFile(std::string& _return, const std::string& file_name, const int64_t offset, const int32_t size) = 0;
  virtual void UpLoadTableFile(const std::string& file_name, const std::string& data, const bool is_last, const int32_t path_num) = 0;
  virtual void PushFiles(const TCompactionResult& output_files, const std::string& source_ip, const int32_t source_port) = 0;
  virtual void SetCompactionNumber(const int64_t new_compaction_num) = 0;
  virtual void InstallCompaction(TStatus& _return, const TInstallCompactionRequest& request) = 0;
  virtual void Put(TStatus& _return, const std::string& key, const std::string& value) = 0;
  virtual void PutBatch(TStatus& _return, const std::vector<std::string> & key, const std::vector<std::string> & value) = 0;
  virtual void Get(GetResult& _return, const std::string& key) = 0;
  virtual void GetBatch(GetBatchResult& _return, const std::vector<std::string> & keys) = 0;
  virtual void FullCompaction(TStatus& _return) = 0;
  virtual void Flush(TStatus& _return) = 0;
};

class ThriftServiceIfFactory {
 public:
  typedef ThriftServiceIf Handler;

  virtual ~ThriftServiceIfFactory() {}

  virtual ThriftServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ThriftServiceIf* /* handler */) = 0;
};

class ThriftServiceIfSingletonFactory : virtual public ThriftServiceIfFactory {
 public:
  ThriftServiceIfSingletonFactory(const ::std::shared_ptr<ThriftServiceIf>& iface) : iface_(iface) {}
  virtual ~ThriftServiceIfSingletonFactory() {}

  virtual ThriftServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ThriftServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ThriftServiceIf> iface_;
};

class ThriftServiceNull : virtual public ThriftServiceIf {
 public:
  virtual ~ThriftServiceNull() {}
  void CompactFiles(TCompactionResult& /* _return */, const TCompactFilesRequest& /* request */) {
    return;
  }
  void DownLoadFile(std::string& /* _return */, const std::string& /* file_name */, const int64_t /* offset */, const int32_t /* size */) {
    return;
  }
  void UpLoadTableFile(const std::string& /* file_name */, const std::string& /* data */, const bool /* is_last */, const int32_t /* path_num */) {
    return;
  }
  void PushFiles(const TCompactionResult& /* output_files */, const std::string& /* source_ip */, const int32_t /* source_port */) {
    return;
  }
  void SetCompactionNumber(const int64_t /* new_compaction_num */) {
    return;
  }
  void InstallCompaction(TStatus& /* _return */, const TInstallCompactionRequest& /* request */) {
    return;
  }
  void Put(TStatus& /* _return */, const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void PutBatch(TStatus& /* _return */, const std::vector<std::string> & /* key */, const std::vector<std::string> & /* value */) {
    return;
  }
  void Get(GetResult& /* _return */, const std::string& /* key */) {
    return;
  }
  void GetBatch(GetBatchResult& /* _return */, const std::vector<std::string> & /* keys */) {
    return;
  }
  void FullCompaction(TStatus& /* _return */) {
    return;
  }
  void Flush(TStatus& /* _return */) {
    return;
  }
};

typedef struct _ThriftService_CompactFiles_args__isset {
  _ThriftService_CompactFiles_args__isset() : request(false) {}
  bool request :1;
} _ThriftService_CompactFiles_args__isset;

class ThriftService_CompactFiles_args {
 public:

  ThriftService_CompactFiles_args(const ThriftService_CompactFiles_args&);
  ThriftService_CompactFiles_args& operator=(const ThriftService_CompactFiles_args&);
  ThriftService_CompactFiles_args() {
  }

  virtual ~ThriftService_CompactFiles_args() noexcept;
  TCompactFilesRequest request;

  _ThriftService_CompactFiles_args__isset __isset;

  void __set_request(const TCompactFilesRequest& val);

  bool operator == (const ThriftService_CompactFiles_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ThriftService_CompactFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_CompactFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_CompactFiles_pargs {
 public:


  virtual ~ThriftService_CompactFiles_pargs() noexcept;
  const TCompactFilesRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_CompactFiles_result__isset {
  _ThriftService_CompactFiles_result__isset() : success(false) {}
  bool success :1;
} _ThriftService_CompactFiles_result__isset;

class ThriftService_CompactFiles_result {
 public:

  ThriftService_CompactFiles_result(const ThriftService_CompactFiles_result&);
  ThriftService_CompactFiles_result& operator=(const ThriftService_CompactFiles_result&);
  ThriftService_CompactFiles_result() {
  }

  virtual ~ThriftService_CompactFiles_result() noexcept;
  TCompactionResult success;

  _ThriftService_CompactFiles_result__isset __isset;

  void __set_success(const TCompactionResult& val);

  bool operator == (const ThriftService_CompactFiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_CompactFiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_CompactFiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_CompactFiles_presult__isset {
  _ThriftService_CompactFiles_presult__isset() : success(false) {}
  bool success :1;
} _ThriftService_CompactFiles_presult__isset;

class ThriftService_CompactFiles_presult {
 public:


  virtual ~ThriftService_CompactFiles_presult() noexcept;
  TCompactionResult* success;

  _ThriftService_CompactFiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_DownLoadFile_args__isset {
  _ThriftService_DownLoadFile_args__isset() : file_name(false), offset(false), size(false) {}
  bool file_name :1;
  bool offset :1;
  bool size :1;
} _ThriftService_DownLoadFile_args__isset;

class ThriftService_DownLoadFile_args {
 public:

  ThriftService_DownLoadFile_args(const ThriftService_DownLoadFile_args&);
  ThriftService_DownLoadFile_args& operator=(const ThriftService_DownLoadFile_args&);
  ThriftService_DownLoadFile_args() : file_name(), offset(0), size(0) {
  }

  virtual ~ThriftService_DownLoadFile_args() noexcept;
  std::string file_name;
  int64_t offset;
  int32_t size;

  _ThriftService_DownLoadFile_args__isset __isset;

  void __set_file_name(const std::string& val);

  void __set_offset(const int64_t val);

  void __set_size(const int32_t val);

  bool operator == (const ThriftService_DownLoadFile_args & rhs) const
  {
    if (!(file_name == rhs.file_name))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const ThriftService_DownLoadFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_DownLoadFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_DownLoadFile_pargs {
 public:


  virtual ~ThriftService_DownLoadFile_pargs() noexcept;
  const std::string* file_name;
  const int64_t* offset;
  const int32_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_DownLoadFile_result__isset {
  _ThriftService_DownLoadFile_result__isset() : success(false) {}
  bool success :1;
} _ThriftService_DownLoadFile_result__isset;

class ThriftService_DownLoadFile_result {
 public:

  ThriftService_DownLoadFile_result(const ThriftService_DownLoadFile_result&);
  ThriftService_DownLoadFile_result& operator=(const ThriftService_DownLoadFile_result&);
  ThriftService_DownLoadFile_result() : success() {
  }

  virtual ~ThriftService_DownLoadFile_result() noexcept;
  std::string success;

  _ThriftService_DownLoadFile_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const ThriftService_DownLoadFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_DownLoadFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_DownLoadFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_DownLoadFile_presult__isset {
  _ThriftService_DownLoadFile_presult__isset() : success(false) {}
  bool success :1;
} _ThriftService_DownLoadFile_presult__isset;

class ThriftService_DownLoadFile_presult {
 public:


  virtual ~ThriftService_DownLoadFile_presult() noexcept;
  std::string* success;

  _ThriftService_DownLoadFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_UpLoadTableFile_args__isset {
  _ThriftService_UpLoadTableFile_args__isset() : file_name(false), data(false), is_last(false), path_num(false) {}
  bool file_name :1;
  bool data :1;
  bool is_last :1;
  bool path_num :1;
} _ThriftService_UpLoadTableFile_args__isset;

class ThriftService_UpLoadTableFile_args {
 public:

  ThriftService_UpLoadTableFile_args(const ThriftService_UpLoadTableFile_args&);
  ThriftService_UpLoadTableFile_args& operator=(const ThriftService_UpLoadTableFile_args&);
  ThriftService_UpLoadTableFile_args() : file_name(), data(), is_last(0), path_num(0) {
  }

  virtual ~ThriftService_UpLoadTableFile_args() noexcept;
  std::string file_name;
  std::string data;
  bool is_last;
  int32_t path_num;

  _ThriftService_UpLoadTableFile_args__isset __isset;

  void __set_file_name(const std::string& val);

  void __set_data(const std::string& val);

  void __set_is_last(const bool val);

  void __set_path_num(const int32_t val);

  bool operator == (const ThriftService_UpLoadTableFile_args & rhs) const
  {
    if (!(file_name == rhs.file_name))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(is_last == rhs.is_last))
      return false;
    if (!(path_num == rhs.path_num))
      return false;
    return true;
  }
  bool operator != (const ThriftService_UpLoadTableFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_UpLoadTableFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_UpLoadTableFile_pargs {
 public:


  virtual ~ThriftService_UpLoadTableFile_pargs() noexcept;
  const std::string* file_name;
  const std::string* data;
  const bool* is_last;
  const int32_t* path_num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_UpLoadTableFile_result {
 public:

  ThriftService_UpLoadTableFile_result(const ThriftService_UpLoadTableFile_result&);
  ThriftService_UpLoadTableFile_result& operator=(const ThriftService_UpLoadTableFile_result&);
  ThriftService_UpLoadTableFile_result() {
  }

  virtual ~ThriftService_UpLoadTableFile_result() noexcept;

  bool operator == (const ThriftService_UpLoadTableFile_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftService_UpLoadTableFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_UpLoadTableFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_UpLoadTableFile_presult {
 public:


  virtual ~ThriftService_UpLoadTableFile_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_PushFiles_args__isset {
  _ThriftService_PushFiles_args__isset() : output_files(false), source_ip(false), source_port(false) {}
  bool output_files :1;
  bool source_ip :1;
  bool source_port :1;
} _ThriftService_PushFiles_args__isset;

class ThriftService_PushFiles_args {
 public:

  ThriftService_PushFiles_args(const ThriftService_PushFiles_args&);
  ThriftService_PushFiles_args& operator=(const ThriftService_PushFiles_args&);
  ThriftService_PushFiles_args() : source_ip(), source_port(0) {
  }

  virtual ~ThriftService_PushFiles_args() noexcept;
  TCompactionResult output_files;
  std::string source_ip;
  int32_t source_port;

  _ThriftService_PushFiles_args__isset __isset;

  void __set_output_files(const TCompactionResult& val);

  void __set_source_ip(const std::string& val);

  void __set_source_port(const int32_t val);

  bool operator == (const ThriftService_PushFiles_args & rhs) const
  {
    if (!(output_files == rhs.output_files))
      return false;
    if (!(source_ip == rhs.source_ip))
      return false;
    if (!(source_port == rhs.source_port))
      return false;
    return true;
  }
  bool operator != (const ThriftService_PushFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_PushFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_PushFiles_pargs {
 public:


  virtual ~ThriftService_PushFiles_pargs() noexcept;
  const TCompactionResult* output_files;
  const std::string* source_ip;
  const int32_t* source_port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_PushFiles_result {
 public:

  ThriftService_PushFiles_result(const ThriftService_PushFiles_result&);
  ThriftService_PushFiles_result& operator=(const ThriftService_PushFiles_result&);
  ThriftService_PushFiles_result() {
  }

  virtual ~ThriftService_PushFiles_result() noexcept;

  bool operator == (const ThriftService_PushFiles_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftService_PushFiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_PushFiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_PushFiles_presult {
 public:


  virtual ~ThriftService_PushFiles_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_SetCompactionNumber_args__isset {
  _ThriftService_SetCompactionNumber_args__isset() : new_compaction_num(false) {}
  bool new_compaction_num :1;
} _ThriftService_SetCompactionNumber_args__isset;

class ThriftService_SetCompactionNumber_args {
 public:

  ThriftService_SetCompactionNumber_args(const ThriftService_SetCompactionNumber_args&);
  ThriftService_SetCompactionNumber_args& operator=(const ThriftService_SetCompactionNumber_args&);
  ThriftService_SetCompactionNumber_args() : new_compaction_num(0) {
  }

  virtual ~ThriftService_SetCompactionNumber_args() noexcept;
  int64_t new_compaction_num;

  _ThriftService_SetCompactionNumber_args__isset __isset;

  void __set_new_compaction_num(const int64_t val);

  bool operator == (const ThriftService_SetCompactionNumber_args & rhs) const
  {
    if (!(new_compaction_num == rhs.new_compaction_num))
      return false;
    return true;
  }
  bool operator != (const ThriftService_SetCompactionNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_SetCompactionNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_SetCompactionNumber_pargs {
 public:


  virtual ~ThriftService_SetCompactionNumber_pargs() noexcept;
  const int64_t* new_compaction_num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_SetCompactionNumber_result {
 public:

  ThriftService_SetCompactionNumber_result(const ThriftService_SetCompactionNumber_result&);
  ThriftService_SetCompactionNumber_result& operator=(const ThriftService_SetCompactionNumber_result&);
  ThriftService_SetCompactionNumber_result() {
  }

  virtual ~ThriftService_SetCompactionNumber_result() noexcept;

  bool operator == (const ThriftService_SetCompactionNumber_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftService_SetCompactionNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_SetCompactionNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_SetCompactionNumber_presult {
 public:


  virtual ~ThriftService_SetCompactionNumber_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_InstallCompaction_args__isset {
  _ThriftService_InstallCompaction_args__isset() : request(false) {}
  bool request :1;
} _ThriftService_InstallCompaction_args__isset;

class ThriftService_InstallCompaction_args {
 public:

  ThriftService_InstallCompaction_args(const ThriftService_InstallCompaction_args&);
  ThriftService_InstallCompaction_args& operator=(const ThriftService_InstallCompaction_args&);
  ThriftService_InstallCompaction_args() {
  }

  virtual ~ThriftService_InstallCompaction_args() noexcept;
  TInstallCompactionRequest request;

  _ThriftService_InstallCompaction_args__isset __isset;

  void __set_request(const TInstallCompactionRequest& val);

  bool operator == (const ThriftService_InstallCompaction_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ThriftService_InstallCompaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_InstallCompaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_InstallCompaction_pargs {
 public:


  virtual ~ThriftService_InstallCompaction_pargs() noexcept;
  const TInstallCompactionRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_InstallCompaction_result__isset {
  _ThriftService_InstallCompaction_result__isset() : success(false) {}
  bool success :1;
} _ThriftService_InstallCompaction_result__isset;

class ThriftService_InstallCompaction_result {
 public:

  ThriftService_InstallCompaction_result(const ThriftService_InstallCompaction_result&);
  ThriftService_InstallCompaction_result& operator=(const ThriftService_InstallCompaction_result&);
  ThriftService_InstallCompaction_result() {
  }

  virtual ~ThriftService_InstallCompaction_result() noexcept;
  TStatus success;

  _ThriftService_InstallCompaction_result__isset __isset;

  void __set_success(const TStatus& val);

  bool operator == (const ThriftService_InstallCompaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_InstallCompaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_InstallCompaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_InstallCompaction_presult__isset {
  _ThriftService_InstallCompaction_presult__isset() : success(false) {}
  bool success :1;
} _ThriftService_InstallCompaction_presult__isset;

class ThriftService_InstallCompaction_presult {
 public:


  virtual ~ThriftService_InstallCompaction_presult() noexcept;
  TStatus* success;

  _ThriftService_InstallCompaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_Put_args__isset {
  _ThriftService_Put_args__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _ThriftService_Put_args__isset;

class ThriftService_Put_args {
 public:

  ThriftService_Put_args(const ThriftService_Put_args&);
  ThriftService_Put_args& operator=(const ThriftService_Put_args&);
  ThriftService_Put_args() : key(), value() {
  }

  virtual ~ThriftService_Put_args() noexcept;
  std::string key;
  std::string value;

  _ThriftService_Put_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const ThriftService_Put_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftService_Put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_Put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_Put_pargs {
 public:


  virtual ~ThriftService_Put_pargs() noexcept;
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_Put_result__isset {
  _ThriftService_Put_result__isset() : success(false) {}
  bool success :1;
} _ThriftService_Put_result__isset;

class ThriftService_Put_result {
 public:

  ThriftService_Put_result(const ThriftService_Put_result&);
  ThriftService_Put_result& operator=(const ThriftService_Put_result&);
  ThriftService_Put_result() {
  }

  virtual ~ThriftService_Put_result() noexcept;
  TStatus success;

  _ThriftService_Put_result__isset __isset;

  void __set_success(const TStatus& val);

  bool operator == (const ThriftService_Put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_Put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_Put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_Put_presult__isset {
  _ThriftService_Put_presult__isset() : success(false) {}
  bool success :1;
} _ThriftService_Put_presult__isset;

class ThriftService_Put_presult {
 public:


  virtual ~ThriftService_Put_presult() noexcept;
  TStatus* success;

  _ThriftService_Put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_PutBatch_args__isset {
  _ThriftService_PutBatch_args__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _ThriftService_PutBatch_args__isset;

class ThriftService_PutBatch_args {
 public:

  ThriftService_PutBatch_args(const ThriftService_PutBatch_args&);
  ThriftService_PutBatch_args& operator=(const ThriftService_PutBatch_args&);
  ThriftService_PutBatch_args() {
  }

  virtual ~ThriftService_PutBatch_args() noexcept;
  std::vector<std::string>  key;
  std::vector<std::string>  value;

  _ThriftService_PutBatch_args__isset __isset;

  void __set_key(const std::vector<std::string> & val);

  void __set_value(const std::vector<std::string> & val);

  bool operator == (const ThriftService_PutBatch_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ThriftService_PutBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_PutBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_PutBatch_pargs {
 public:


  virtual ~ThriftService_PutBatch_pargs() noexcept;
  const std::vector<std::string> * key;
  const std::vector<std::string> * value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_PutBatch_result__isset {
  _ThriftService_PutBatch_result__isset() : success(false) {}
  bool success :1;
} _ThriftService_PutBatch_result__isset;

class ThriftService_PutBatch_result {
 public:

  ThriftService_PutBatch_result(const ThriftService_PutBatch_result&);
  ThriftService_PutBatch_result& operator=(const ThriftService_PutBatch_result&);
  ThriftService_PutBatch_result() {
  }

  virtual ~ThriftService_PutBatch_result() noexcept;
  TStatus success;

  _ThriftService_PutBatch_result__isset __isset;

  void __set_success(const TStatus& val);

  bool operator == (const ThriftService_PutBatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_PutBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_PutBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_PutBatch_presult__isset {
  _ThriftService_PutBatch_presult__isset() : success(false) {}
  bool success :1;
} _ThriftService_PutBatch_presult__isset;

class ThriftService_PutBatch_presult {
 public:


  virtual ~ThriftService_PutBatch_presult() noexcept;
  TStatus* success;

  _ThriftService_PutBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_Get_args__isset {
  _ThriftService_Get_args__isset() : key(false) {}
  bool key :1;
} _ThriftService_Get_args__isset;

class ThriftService_Get_args {
 public:

  ThriftService_Get_args(const ThriftService_Get_args&);
  ThriftService_Get_args& operator=(const ThriftService_Get_args&);
  ThriftService_Get_args() : key() {
  }

  virtual ~ThriftService_Get_args() noexcept;
  std::string key;

  _ThriftService_Get_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const ThriftService_Get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const ThriftService_Get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_Get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_Get_pargs {
 public:


  virtual ~ThriftService_Get_pargs() noexcept;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_Get_result__isset {
  _ThriftService_Get_result__isset() : success(false) {}
  bool success :1;
} _ThriftService_Get_result__isset;

class ThriftService_Get_result {
 public:

  ThriftService_Get_result(const ThriftService_Get_result&);
  ThriftService_Get_result& operator=(const ThriftService_Get_result&);
  ThriftService_Get_result() {
  }

  virtual ~ThriftService_Get_result() noexcept;
  GetResult success;

  _ThriftService_Get_result__isset __isset;

  void __set_success(const GetResult& val);

  bool operator == (const ThriftService_Get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_Get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_Get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_Get_presult__isset {
  _ThriftService_Get_presult__isset() : success(false) {}
  bool success :1;
} _ThriftService_Get_presult__isset;

class ThriftService_Get_presult {
 public:


  virtual ~ThriftService_Get_presult() noexcept;
  GetResult* success;

  _ThriftService_Get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftService_GetBatch_args__isset {
  _ThriftService_GetBatch_args__isset() : keys(false) {}
  bool keys :1;
} _ThriftService_GetBatch_args__isset;

class ThriftService_GetBatch_args {
 public:

  ThriftService_GetBatch_args(const ThriftService_GetBatch_args&);
  ThriftService_GetBatch_args& operator=(const ThriftService_GetBatch_args&);
  ThriftService_GetBatch_args() {
  }

  virtual ~ThriftService_GetBatch_args() noexcept;
  std::vector<std::string>  keys;

  _ThriftService_GetBatch_args__isset __isset;

  void __set_keys(const std::vector<std::string> & val);

  bool operator == (const ThriftService_GetBatch_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const ThriftService_GetBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_GetBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_GetBatch_pargs {
 public:


  virtual ~ThriftService_GetBatch_pargs() noexcept;
  const std::vector<std::string> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_GetBatch_result__isset {
  _ThriftService_GetBatch_result__isset() : success(false) {}
  bool success :1;
} _ThriftService_GetBatch_result__isset;

class ThriftService_GetBatch_result {
 public:

  ThriftService_GetBatch_result(const ThriftService_GetBatch_result&);
  ThriftService_GetBatch_result& operator=(const ThriftService_GetBatch_result&);
  ThriftService_GetBatch_result() {
  }

  virtual ~ThriftService_GetBatch_result() noexcept;
  GetBatchResult success;

  _ThriftService_GetBatch_result__isset __isset;

  void __set_success(const GetBatchResult& val);

  bool operator == (const ThriftService_GetBatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_GetBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_GetBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_GetBatch_presult__isset {
  _ThriftService_GetBatch_presult__isset() : success(false) {}
  bool success :1;
} _ThriftService_GetBatch_presult__isset;

class ThriftService_GetBatch_presult {
 public:


  virtual ~ThriftService_GetBatch_presult() noexcept;
  GetBatchResult* success;

  _ThriftService_GetBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ThriftService_FullCompaction_args {
 public:

  ThriftService_FullCompaction_args(const ThriftService_FullCompaction_args&);
  ThriftService_FullCompaction_args& operator=(const ThriftService_FullCompaction_args&);
  ThriftService_FullCompaction_args() {
  }

  virtual ~ThriftService_FullCompaction_args() noexcept;

  bool operator == (const ThriftService_FullCompaction_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftService_FullCompaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_FullCompaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_FullCompaction_pargs {
 public:


  virtual ~ThriftService_FullCompaction_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_FullCompaction_result__isset {
  _ThriftService_FullCompaction_result__isset() : success(false) {}
  bool success :1;
} _ThriftService_FullCompaction_result__isset;

class ThriftService_FullCompaction_result {
 public:

  ThriftService_FullCompaction_result(const ThriftService_FullCompaction_result&);
  ThriftService_FullCompaction_result& operator=(const ThriftService_FullCompaction_result&);
  ThriftService_FullCompaction_result() {
  }

  virtual ~ThriftService_FullCompaction_result() noexcept;
  TStatus success;

  _ThriftService_FullCompaction_result__isset __isset;

  void __set_success(const TStatus& val);

  bool operator == (const ThriftService_FullCompaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_FullCompaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_FullCompaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_FullCompaction_presult__isset {
  _ThriftService_FullCompaction_presult__isset() : success(false) {}
  bool success :1;
} _ThriftService_FullCompaction_presult__isset;

class ThriftService_FullCompaction_presult {
 public:


  virtual ~ThriftService_FullCompaction_presult() noexcept;
  TStatus* success;

  _ThriftService_FullCompaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ThriftService_Flush_args {
 public:

  ThriftService_Flush_args(const ThriftService_Flush_args&);
  ThriftService_Flush_args& operator=(const ThriftService_Flush_args&);
  ThriftService_Flush_args() {
  }

  virtual ~ThriftService_Flush_args() noexcept;

  bool operator == (const ThriftService_Flush_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftService_Flush_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_Flush_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_Flush_pargs {
 public:


  virtual ~ThriftService_Flush_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_Flush_result__isset {
  _ThriftService_Flush_result__isset() : success(false) {}
  bool success :1;
} _ThriftService_Flush_result__isset;

class ThriftService_Flush_result {
 public:

  ThriftService_Flush_result(const ThriftService_Flush_result&);
  ThriftService_Flush_result& operator=(const ThriftService_Flush_result&);
  ThriftService_Flush_result() {
  }

  virtual ~ThriftService_Flush_result() noexcept;
  TStatus success;

  _ThriftService_Flush_result__isset __isset;

  void __set_success(const TStatus& val);

  bool operator == (const ThriftService_Flush_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftService_Flush_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_Flush_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftService_Flush_presult__isset {
  _ThriftService_Flush_presult__isset() : success(false) {}
  bool success :1;
} _ThriftService_Flush_presult__isset;

class ThriftService_Flush_presult {
 public:


  virtual ~ThriftService_Flush_presult() noexcept;
  TStatus* success;

  _ThriftService_Flush_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ThriftServiceClient : virtual public ThriftServiceIf {
 public:
  ThriftServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ThriftServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void CompactFiles(TCompactionResult& _return, const TCompactFilesRequest& request);
  void send_CompactFiles(const TCompactFilesRequest& request);
  void recv_CompactFiles(TCompactionResult& _return);
  void DownLoadFile(std::string& _return, const std::string& file_name, const int64_t offset, const int32_t size);
  void send_DownLoadFile(const std::string& file_name, const int64_t offset, const int32_t size);
  void recv_DownLoadFile(std::string& _return);
  void UpLoadTableFile(const std::string& file_name, const std::string& data, const bool is_last, const int32_t path_num);
  void send_UpLoadTableFile(const std::string& file_name, const std::string& data, const bool is_last, const int32_t path_num);
  void recv_UpLoadTableFile();
  void PushFiles(const TCompactionResult& output_files, const std::string& source_ip, const int32_t source_port);
  void send_PushFiles(const TCompactionResult& output_files, const std::string& source_ip, const int32_t source_port);
  void recv_PushFiles();
  void SetCompactionNumber(const int64_t new_compaction_num);
  void send_SetCompactionNumber(const int64_t new_compaction_num);
  void recv_SetCompactionNumber();
  void InstallCompaction(TStatus& _return, const TInstallCompactionRequest& request);
  void send_InstallCompaction(const TInstallCompactionRequest& request);
  void recv_InstallCompaction(TStatus& _return);
  void Put(TStatus& _return, const std::string& key, const std::string& value);
  void send_Put(const std::string& key, const std::string& value);
  void recv_Put(TStatus& _return);
  void PutBatch(TStatus& _return, const std::vector<std::string> & key, const std::vector<std::string> & value);
  void send_PutBatch(const std::vector<std::string> & key, const std::vector<std::string> & value);
  void recv_PutBatch(TStatus& _return);
  void Get(GetResult& _return, const std::string& key);
  void send_Get(const std::string& key);
  void recv_Get(GetResult& _return);
  void GetBatch(GetBatchResult& _return, const std::vector<std::string> & keys);
  void send_GetBatch(const std::vector<std::string> & keys);
  void recv_GetBatch(GetBatchResult& _return);
  void FullCompaction(TStatus& _return);
  void send_FullCompaction();
  void recv_FullCompaction(TStatus& _return);
  void Flush(TStatus& _return);
  void send_Flush();
  void recv_Flush(TStatus& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ThriftServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ThriftServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ThriftServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_CompactFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DownLoadFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpLoadTableFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetCompactionNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_InstallCompaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PutBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FullCompaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Flush(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ThriftServiceProcessor(::std::shared_ptr<ThriftServiceIf> iface) :
    iface_(iface) {
    processMap_["CompactFiles"] = &ThriftServiceProcessor::process_CompactFiles;
    processMap_["DownLoadFile"] = &ThriftServiceProcessor::process_DownLoadFile;
    processMap_["UpLoadTableFile"] = &ThriftServiceProcessor::process_UpLoadTableFile;
    processMap_["PushFiles"] = &ThriftServiceProcessor::process_PushFiles;
    processMap_["SetCompactionNumber"] = &ThriftServiceProcessor::process_SetCompactionNumber;
    processMap_["InstallCompaction"] = &ThriftServiceProcessor::process_InstallCompaction;
    processMap_["Put"] = &ThriftServiceProcessor::process_Put;
    processMap_["PutBatch"] = &ThriftServiceProcessor::process_PutBatch;
    processMap_["Get"] = &ThriftServiceProcessor::process_Get;
    processMap_["GetBatch"] = &ThriftServiceProcessor::process_GetBatch;
    processMap_["FullCompaction"] = &ThriftServiceProcessor::process_FullCompaction;
    processMap_["Flush"] = &ThriftServiceProcessor::process_Flush;
  }

  virtual ~ThriftServiceProcessor() {}
};

class ThriftServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ThriftServiceProcessorFactory(const ::std::shared_ptr< ThriftServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ThriftServiceIfFactory > handlerFactory_;
};

class ThriftServiceMultiface : virtual public ThriftServiceIf {
 public:
  ThriftServiceMultiface(std::vector<std::shared_ptr<ThriftServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ThriftServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<ThriftServiceIf> > ifaces_;
  ThriftServiceMultiface() {}
  void add(::std::shared_ptr<ThriftServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void CompactFiles(TCompactionResult& _return, const TCompactFilesRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CompactFiles(_return, request);
    }
    ifaces_[i]->CompactFiles(_return, request);
    return;
  }

  void DownLoadFile(std::string& _return, const std::string& file_name, const int64_t offset, const int32_t size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DownLoadFile(_return, file_name, offset, size);
    }
    ifaces_[i]->DownLoadFile(_return, file_name, offset, size);
    return;
  }

  void UpLoadTableFile(const std::string& file_name, const std::string& data, const bool is_last, const int32_t path_num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpLoadTableFile(file_name, data, is_last, path_num);
    }
    ifaces_[i]->UpLoadTableFile(file_name, data, is_last, path_num);
  }

  void PushFiles(const TCompactionResult& output_files, const std::string& source_ip, const int32_t source_port) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushFiles(output_files, source_ip, source_port);
    }
    ifaces_[i]->PushFiles(output_files, source_ip, source_port);
  }

  void SetCompactionNumber(const int64_t new_compaction_num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetCompactionNumber(new_compaction_num);
    }
    ifaces_[i]->SetCompactionNumber(new_compaction_num);
  }

  void InstallCompaction(TStatus& _return, const TInstallCompactionRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->InstallCompaction(_return, request);
    }
    ifaces_[i]->InstallCompaction(_return, request);
    return;
  }

  void Put(TStatus& _return, const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Put(_return, key, value);
    }
    ifaces_[i]->Put(_return, key, value);
    return;
  }

  void PutBatch(TStatus& _return, const std::vector<std::string> & key, const std::vector<std::string> & value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PutBatch(_return, key, value);
    }
    ifaces_[i]->PutBatch(_return, key, value);
    return;
  }

  void Get(GetResult& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Get(_return, key);
    }
    ifaces_[i]->Get(_return, key);
    return;
  }

  void GetBatch(GetBatchResult& _return, const std::vector<std::string> & keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetBatch(_return, keys);
    }
    ifaces_[i]->GetBatch(_return, keys);
    return;
  }

  void FullCompaction(TStatus& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FullCompaction(_return);
    }
    ifaces_[i]->FullCompaction(_return);
    return;
  }

  void Flush(TStatus& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Flush(_return);
    }
    ifaces_[i]->Flush(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ThriftServiceConcurrentClient : virtual public ThriftServiceIf {
 public:
  ThriftServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ThriftServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void CompactFiles(TCompactionResult& _return, const TCompactFilesRequest& request);
  int32_t send_CompactFiles(const TCompactFilesRequest& request);
  void recv_CompactFiles(TCompactionResult& _return, const int32_t seqid);
  void DownLoadFile(std::string& _return, const std::string& file_name, const int64_t offset, const int32_t size);
  int32_t send_DownLoadFile(const std::string& file_name, const int64_t offset, const int32_t size);
  void recv_DownLoadFile(std::string& _return, const int32_t seqid);
  void UpLoadTableFile(const std::string& file_name, const std::string& data, const bool is_last, const int32_t path_num);
  int32_t send_UpLoadTableFile(const std::string& file_name, const std::string& data, const bool is_last, const int32_t path_num);
  void recv_UpLoadTableFile(const int32_t seqid);
  void PushFiles(const TCompactionResult& output_files, const std::string& source_ip, const int32_t source_port);
  int32_t send_PushFiles(const TCompactionResult& output_files, const std::string& source_ip, const int32_t source_port);
  void recv_PushFiles(const int32_t seqid);
  void SetCompactionNumber(const int64_t new_compaction_num);
  int32_t send_SetCompactionNumber(const int64_t new_compaction_num);
  void recv_SetCompactionNumber(const int32_t seqid);
  void InstallCompaction(TStatus& _return, const TInstallCompactionRequest& request);
  int32_t send_InstallCompaction(const TInstallCompactionRequest& request);
  void recv_InstallCompaction(TStatus& _return, const int32_t seqid);
  void Put(TStatus& _return, const std::string& key, const std::string& value);
  int32_t send_Put(const std::string& key, const std::string& value);
  void recv_Put(TStatus& _return, const int32_t seqid);
  void PutBatch(TStatus& _return, const std::vector<std::string> & key, const std::vector<std::string> & value);
  int32_t send_PutBatch(const std::vector<std::string> & key, const std::vector<std::string> & value);
  void recv_PutBatch(TStatus& _return, const int32_t seqid);
  void Get(GetResult& _return, const std::string& key);
  int32_t send_Get(const std::string& key);
  void recv_Get(GetResult& _return, const int32_t seqid);
  void GetBatch(GetBatchResult& _return, const std::vector<std::string> & keys);
  int32_t send_GetBatch(const std::vector<std::string> & keys);
  void recv_GetBatch(GetBatchResult& _return, const int32_t seqid);
  void FullCompaction(TStatus& _return);
  int32_t send_FullCompaction();
  void recv_FullCompaction(TStatus& _return, const int32_t seqid);
  void Flush(TStatus& _return);
  int32_t send_Flush();
  void recv_Flush(TStatus& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
