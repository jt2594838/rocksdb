/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef rpc_TYPES_H
#define rpc_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace rocksT {

class RemoteCompactionJob;


class RemoteCompactionJob : public virtual ::apache::thrift::TBase {
 public:

  RemoteCompactionJob(const RemoteCompactionJob&);
  RemoteCompactionJob& operator=(const RemoteCompactionJob&);
  RemoteCompactionJob() {
  }

  virtual ~RemoteCompactionJob() noexcept;

  bool operator == (const RemoteCompactionJob & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteCompactionJob &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteCompactionJob & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RemoteCompactionJob &a, RemoteCompactionJob &b);

std::ostream& operator<<(std::ostream& out, const RemoteCompactionJob& obj);

} // namespace

#endif
